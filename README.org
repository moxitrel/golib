*** Pool
A goroutine pool.
#+BEGIN_SRC go
import "github.com/moxitrel/gosvc"

// Make a new goroutine pool
// min    : at least 3  workers live all the time
// max    : at most 100 workers can be created
// timeout: terminate the workers which idle for 1 minutes
// handler: handle the submitted task
pool := gosvc.NewWorkerPool(
    /* min     */ 3,
    /* max     */ 100,
    /* timeout */ time.Minute,
    /* handler */ func(arg interface{}) {
        time.Sleep(time.Second)
    })

// submit tasks
pool.Submit(1)      // 2  free workers left
pool.Submit(2)      // 1  free worker  left
pool.Submit(3)      // no free worker  left
pool.Submit(4)      // a new worker is created, total 4 workers
pool.Submit(5)      // a new worker is created, total 5 workers

// 2 workers will terminate because of timeout, 3 left
time.Sleep(2 * time.Minute)

// signal to stop
pool.Stop()
// wait until all submitted tasks finished
pool.Wait()
#+END_SRC go

*** Timer
A wrapper for time.Timer to simplify the usage.
#+BEGIN_SRC go
import "github.com/moxitrel/gosvc"

timer := gosvc.NewTimer()   // make a new timer

timer.Start(time.Minute)    // call .Start() at beginning
select {
case c <- nil :
    // not timeout
case <-c      :
    // not timeout
case <-timer.C:
    // timeout
}
timer.Stop()                // call .Stop() at the end
#+END_SRC go

* See Also
- [[https://github.com/panjf2000/ants][ants]]
